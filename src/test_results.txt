Note: These results are from my linux vm which is a very old low power cpu.
Will present more data from an Alder Lake cpu which shows rigtop::SPSCQueue performing equally well.

Seqlock based ringbuffer optimized for writes
    writer throughput = 376M msgs/second.
    reader throughput = 187M msgs/second (writer goes too fast for the reader)

    seqlock ringbuff test_iterations=800000000                                                               
    starting writer   target = 800000000, core_affinity = 3                             
    starting reader 0 target = 800000000, core_affinity = 4                                                  
    capacity=33554432 elements, readers=1 threads, element_size=8 bytes                                      
    writer produced 800000000 in 2128617430 ns, wasted_writes= 0                        
    throughput=3.75831e+08 msgs/sec, 2.80016 GBPS, 24.0532 Gbps, avg_latency=2.66077ns                     
    reader 0 read 397346816 in 2132206965ns, wasted_reads= 7767                                              
    throughput=1.86355e+08 msgs/sec, 1.38845 GBPS, 11.9267 Gbps, avg_latency=5.36611ns                     
    started -57572ns after writer                                                                          
    effective system throughput=1.8636e+08 msg/sec, 1.38849 GBPS, 11.927 Gbps, avg_latency=5.36597ns (influenced by latency to start reader threads & scheduling etc.)

Ringbuffer that allows reader to catch up.
    writer throughput = 379M msgs/second.
    reader throughput = 367M msgs/second.


    MultiCastRingBuff test_iterations=800000000, write_batch=1, read_batch=1                                 
    starting writer   target = 800000000, core_affinity = 3                                                  
    starting reader 0 target = 800000000, core_affinity = 4                                                  
    capacity=33554432 elements, readers=1 threads, element_size=8 bytes
    writer produced 800000000 in 2108549449 ns, wasted_writes= 10842736                                      
    throughput=3.79408e+08 msgs/sec, 2.82681 GBPS, 24.2821 Gbps, avg_latency=2.63569ns
    reader 0 read 800000000 in 2179419110ns, wasted_reads= 3464                                              
    throughput=3.6707e+08 msgs/sec, 2.73489 GBPS, 23.4925 Gbps, avg_latency=2.72427ns
    started -21881ns after writer                                                                          
    effective system throughput=3.67074e+08 msg/sec, 2.73491 GBPS, 23.4927 Gbps, avg_latency=2.72425ns (influenced by latency to start reader threads & scheduling etc.)  

folly::SingleProduceSingleConsumer 
    writer throughput = 134M msgs/second.
    reader throughput = 134M msgs/second.

    folly::ProducerConsumerQueue test_iterations=800000000                                                   
    starting writer   target = 800000000, core_affinity = 3                                                  
    starting reader 0 target = 800000000, core_affinity = 4                                                  
    capacity=33554432 elements, readers=1 threads, element_size=8 bytes                                      
    writer produced 800000000 in 5957096251 ns, wasted_writes= 0 
    throughput=1.34294e+08 msgs/sec, 1.00057 GBPS, 8.59479 Gbps, avg_latency=7.44637ns                     
    reader 0 read 800000000 in 5966416190ns, wasted_reads= 293691                       
    throughput=1.34084e+08 msgs/sec, 0.999002 GBPS, 8.58137 Gbps, avg_latency=7.45802ns                    
    started -19689ns after writer                                                                          
    effective system throughput=1.34084e+08 msg/sec, 0.999006 GBPS, 8.58139 Gbps, avg_latency=7.458ns (influenced by latency to start reader threads & scheduling etc.)  

rigtorp::SPSCQueue
The test results in writer going too fast such that it spends more time contending with reader cacheline to make progress.
This is clear from wasted_writes stat below.
I will present the actual number from an Alder Lake later which shows this ringbuffer performing extremely well.

    rigtorp::SPSCQueue, test_iterations=800000000                                                            
    starting writer   target = 800000000, core_affinity = 3                             
    starting reader 0 target = 800000000, core_affinity = 4                                                  
    capacity=33554432 elements, readers=1 threads, element_size=8 bytes                                      
    writer produced 800000000 in 10322038174 ns, wasted_writes= 163696901               
    throughput=7.75041e+07 msgs/sec, 0.57745 GBPS, 4.96026 Gbps, avg_latency=12.9025ns                     
    reader 0 read 800000000 in 10396108326ns, wasted_reads= 4874                                             
    throughput=7.69519e+07 msgs/sec, 0.573336 GBPS, 4.92492 Gbps, avg_latency=12.9951ns                    
    started -25817ns after writer                                                                          
    effective system throughput=7.69521e+07 msg/sec, 0.573338 GBPS, 4.92493 Gbps, avg_latency=12.9951ns (influenced by latency to start reader threads & scheduling etc.)